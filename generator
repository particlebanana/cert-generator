#! /bin/bash
pkg="cert-generator"
version="0.1"

parent_file_path="/etc/kubernetes/ssl/"

DOMAIN=$1

set -o nounset
set -o pipefail

function csr {
  cat <<EOF
{"CN":"$1","hosts":[""],"key":{"algo":"rsa","size":2048}}
EOF
}

function _chmod {
  CN=$1
  chmod 0644 $CN.pem ${CN}-key.pem
}

function generate {
  CN=$1
  PROFILE=$2
  HOSTS=$3

  echo "$(csr $CN)" \
    | cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=$PROFILE \
      -hostname="$HOSTS" - \
    | cfssljson -bare $CN

  _chmod $CN
}

cd $parent_file_path

region=$(curl -s http://169.254.169.254/latest/dynamic/instance-identity/document | jq --raw-output .region)

# Decrypt the CA files on disk
aws --region $region kms decrypt --ciphertext-blob fileb:///etc/kubernetes/ssl/ca.encrypted.pem --output text --query Plaintext | base64 -d > /etc/kubernetes/ssl/ca.pem
aws --region $region kms decrypt --ciphertext-blob fileb:///etc/kubernetes/ssl/ca-key.encrypted.pem --output text --query Plaintext | base64 -d > /etc/kubernetes/ssl/ca-key.pem
aws --region $region kms decrypt --ciphertext-blob fileb:///etc/kubernetes/ssl/ca-config.encrypted.json --output text --query Plaintext | base64 -d > /etc/kubernetes/ssl/ca-config.json
_chmod ca
chmod 0644 ca-config.json

# generate keys and certs
generate assets client-server "localhost,kubernetes,kubernetes.default,127.0.0.1,*.*.compute.internal,*.ec2.internal,$DOMAIN"

exit 0
